# BEE 4750 Homework 1: Introduction to Using Julia

**Name**:

**ID**:

> **Due Date**
>
> Thursday, 9/5/24, 9:00pm

## Overview

### Instructions

-   Problem 1 consist of a series of code snippets for you to interpret
    and debug. You will be asked to identify relevant error(s) and fix
    the code.
-   Problem 2 gives you some code that works as intended; your goal is
    to identify the code’s purpose by following its logic.
-   Problem 3 asks you to write code to generate a random vector and
    subtract off its mean, using a Julia syntax called broadcasting.
-   Problem 4 asks you to convert a verbal description of a wastewater
    treatment system into a Julia function, and then to use that
    function to explore the impact of different wastewater allocation
    strategies.
-   Problem 5 (5750 only) asks you to use more advanced Julia
    techniques.

### Load Environment

The following code loads the environment and makes sure all needed
packages are installed. This should be at the start of most Julia
scripts.
import Pkg
Pkg.activate(@__DIR__)
Pkg.instantiate()
Standard Julia practice is to load all needed packages at the top of a
file. If you need to load any additional packages in any assignments
beyond those which are loaded by default, feel free to add a `using`
statement, though [you may need to install the
package](https://viveks.me/environmental-systems-analysis/tutorials/julia-basics.html#package-management).
using Random
using Plots
using GraphRecipes
using LaTeXStrings
# this sets a random seed, which ensures reproducibility of random number generation. You should always set a seed when working with random numbers.
Random.seed!(1)
## Problems (Total: 50/60 Points)

### Problem 1 (15 points)

The following subproblems all involve code snippets that require
debugging.

**For each of them**:

-   identify and describe the logic and/or syntax error;
-   write a fixed version of the function;
-   use your fixed function to solve the problem.

#### Problem 1.1

You’ve been tasked with writing code to identify the minimum value in an
array. You cannot use a predefined function. Your colleague suggested
the function below, but it does not return the minimum value.
##### Problem 1.1 Debugging Errors, Syntax, Logic, Mathematical Explanations
- Correct implementation evidence: The code also successfully implemented the **function, minumum,** with the **purpose** of identifying the minimum value in an array as shown by the test array return value of 78 [#].
- Correct solution: the code returns the **minimum value for the test array [89, 90, 95, 100, 78, 99, 98, 100, 95]** as a **value of 78 [#]**.
- (Interpretation) Error: min_value 
    - Error issue: min_value should not be initialized as 0 because it may not be in the array. The first element in the array must be assumed to be the minumum instead.
    - Solution to error: set min_value (minimum value) to the first value in the array, which is min_value = array[1], to iterate through the rest of the array and compare each iteration value to the current min_value.
    - Updated code: min_value = array[1]
- (Interpretation) Error: for i in 1:length
    - Error issue: **for loop iteration** (for i in 1:length) would create an **unnecessary comparison** since the first array element has already been initialized as the min_value. 
    - Solution to error: **changed iteration** to start at the 2nd element in the array to avoid the uneccessary comparison issue. 
    - Updated code: for i in 2:length(array) 
# Find minimum value in array
function minimum(array)
    min_value = array[1] 
    
    # Iterations starting at array value 2
    for i in 2:length(array)
        if array[i] < min_value
            min_value = array[i]
        end
    end
    # Returns minimum value in array
    return min_value
end

# Test function minimum(array)
array_values = [89, 90, 95, 100, 100, 78, 99, 98, 100, 95]
# Test function minimum(array) return
@show minimum(array_values);
#### Problem 1.2

Your team is trying to compute the average grade for your class, but the
following code produces an error.
##### Problem 1.2 Debugging Errors, Syntax, Logic, Mathematical Explanations
- Correct implementation evidence: The code successfully implemented the **function, class_average,** by **importing the Statistics package** and using it to apply the mean function, defining the class_average function to have the **purpose** of calculating the average/mean grade by applying mean(grades)
- Correct solution: the code **returns the mean of the grades from the array**. The **test array** is [89, 90, 95, 100, 100, 78, 99, 98, 100, 95], and the **returned mean value is equivalent to 94.4**.
- (Intepretation) Error: the Test statement was placed before defining the function and did not allow code execution.
    - Solution to error: **moved the Test statement** to the bottom, **after initializing the function**,  before running numerical data.
- (Interpretation) Error: average_grade = mean(student_grades)
    - Error issue: This code would not have allowed all passable arrays of student grades for calculating the average grade.
    - Solution to error: Changed average_grade = mean(student_grades) to average_grade = mean(grades). Removed student_grades and replaced with grades so it is **now passable for any array of student grades**.
    - Updated code: average_grade = mean(grades)
- (Interpretation) Error: the code cell did not execute the function and store data to return the class mean grade value. 
    - Solution to error: Updated code allows for executing the function to **return mean grade value by storing data** from calculating the class mean grade from the students' grades. 
    - Updated code: average_grade = class_average(student_grades)
- Mathematical explanation: The **average grade is calculated by** summing all student grades from the array, and then dividing the sum by the number of array elements. The mean function was used in this code to calculate the mean grade value.
    - **Equation**: mean [#] = (sum of array elements [#])/(number of array elements [#])

# Import Statistics package
using Statistics

# Calculate student grade mean 
function class_average(grades)
  average_grade = mean(grades)
  return average_grade
end

# Test for average student grades
student_grades = [89, 90, 95, 100, 100, 78, 99, 98, 100, 95]

# Execute function average_grade
average_grade = class_average(student_grades)

# Mean/average_grade function return
@show average_grade;
#### Problem 1.3

Your team wants to know the expected payout of an old Italian dice game
called *passadieci* (which was analyzed by Galileo as one of the first
examples of a rigorous study of probability). The goal of passadieci is
to get at least an 11 from rolling three fair, six-sided dice. Your
strategy is to compute the average wins from 1,000 trials, but the code
you’ve written below produces an error.
##### Problem 1.3 Debugging Errors, Syntax, Logic, Mathematical Explanations
- Correct implementation evidence: The code successfully implemented the **function passadieci** with the **purpose** of calculating the probability of winning passadieci, a game that involves rolling 3 6-sided dice with the goal of getting value of at least 11.
- Correct solution: the code iterates through 1 to length n_trials and returns a 1000 element vector. The code returns a win_prob (the win probability) value of 0.501, which means there's approximately a 50.1% chance of winning Passadieci.
    - Mathematical explanation: The probability of winning was calculated using the **probability of event equation** by summing the total number of wins as simulated through a random roll in 1,000 total trials and dividing that sum by the total number of trials, which was 1,000.
        - **Equation**: P(win) [#] = (Wins [#])/(Total trials [#])
- (Intepretation) Error: outcomes = zero(n_trials)
    - Error issue: this initialization causes an array to be created, but the **array is not the correct length**. 
    - Solution to error: need to **initialize** an array that has a **length** which is equivalent to n_trials (the total number of trials).
    -  Updated code: outcomes = zeros(Int, n_trials)
- (Interpretation) Error: outcomes[i] = (sum(passadieci()) > 11)
    - Error issue: this error **does not simulate a boolean value**, so a **win or loss outcome is not recorded** as a 1 for a win or 0 for a loss.
    - Solution to error: the syntax was updated to properly return a 1 (win) or 0 (loss) outcome to then calculate the probability of winning the game.
    - Updated code: outcomes[i] = sum(passadieci()) >= 11 ? 1 : 0
# Function average wins of 1000 trials from passadieci
function passadieci()
    # this rand() call samples 3 values from the vector [1, 6]
    roll = rand(1:6, 3) 
    return roll
end

# Initialize total number of trials
n_trials = 1_000

# Initialize array of zeros, length n_trials = 1000 here
outcomes = zeros(Int, n_trials)

# Iterate through 1 to length n_trials
for i = 1:n_trials
    # Dice total >=11 or />= 11, 1 if Y, 0 if N
    outcomes[i] = sum(passadieci()) >= 11 ? 1 : 0
end

# Calculate probability of winning mean 
win_prob = sum(outcomes) / n_trials # compute average number of wins
# Outcome return value, win_prob = probability of winning
@show win_prob;
### Problem 2 (5 points)

You’ve been handed some code to analyze. The original coder was not very
considerate of other potential users: the function is called
`mystery_function` and there are no comments explaining the purpose of
the code. It appears to take in an array and return some numbers, and
you’ve been assured that the code works as intended.
The purpose of mystery_function is to iterate through an array. When iterating through the array, the code determines whether or not a value v is already in the array. If the value v is not already contained in the array, append the array y with value v. If the value is already in array y, do not append value v in array y.
##### Problem 2 Debugging Errors, Syntax, Logic, Mathematical Explanations
- Correct implementation evidence: **mystery_function** is correctly implemented, the **purpose** of which is to iterate through an array and remove duplicate values that are already in the array, y, before appending a non-duplicate value, v to the array. After all elements in the array are iterated through in a test array, the **correct, unique-only, elements, are returned as the array y**.
- Correct solution: 
    - The array, values, is correctly iterated through and all unique values were appended to an initially empty array, y, and then returns the array y. The **built-in Julia technique, unique**, automatically performs this procedure, and more specifically, on the **tested array, list_of_values**, which has the elements [1, 2, 3, 4, 3, 4, 2, 1]. **The solution of an array y is returned as follows: [1, 2, 3, 4]**.
- (Interpretation) Error: **no comments** were initially added to the code.
    - Error issue: a lack of comments indicates a lack of clarity for other users running or reading the code, making it difficult to understand or debug.
    - Solution to error: all necessary **comments were added** to the code, **including an explanation of mystery_function 's main purpose, how and why it works, the purpose of every "section" of code, and any code sequences not immediately understood** for clarity. 
    - Updated code/comments added: 
        - ***Purpose*** **of mystery_function explanation** (placed above function definition): # Function to remove replicate values in array
        - ***How*** **function works** (placed before the array iteration for loop for appending only unique values): # For each array value, check if v is in array already
        - ***How*** **function works** (placed before returning unique array y): # Return array with appended values, no replicate values
        - ***Why*** **function works** (placed before test array that shows why the mystery_function works): # Test mystery_function with specific array/array values
        - ***Why*** **function works** (placed before returned test array after iteration and appending, which demonstates the working mystery_function): # Test mystery_function returned array.
# Function to remove replicate values in array
function mystery_function(values)
   # Initialize array y
    y = []

    # For each array value, check if v is in array already
    for v in values
        if !(v in y)
            append!(y, v)
        end
    end
    # Return array with appended values, no replicate values
    return y
end

# Test mystery_function with specific array/array values
list_of_values = [1, 2, 3, 4, 3, 4, 2, 1]

# Test mystery_function returned array
@show mystery_function(list_of_values);
- Below, the built-in function unique is used to replace the function mystery_function (https://docs.julialang.org/en/v1/base/collections/).  
# Test initialized array for function unique
list_of_values = [1, 2, 3, 4, 3, 4, 2, 1]

# Built-in Julia function unique, replaces mystery_function
unique_vals = unique(list_of_values)

# Test mystery_function returned array
@show unique_vals;
##### Problem 3 Debugging Errors, Syntax, Logic, Mathematical Explanations
- Correct implementation evidence: the code implements the **function, compute_mean**, as instructed, which had the **purpose** of calculating the sum and computes the mean of elements in a **vector, v**, using a **for loop**. This function correctly **sums all numbers in the vector, v, by** iterating through a **for loop** and adding each number for all iterations, and then dividing that sum by the number values in v. 
    - Correct solution: The **compute_mean function** iterates through each element, number, in the vector v, and the resulting sum is divided by v's number of elements to be equal to the **mean of the vector, mean_v**. The **test vector [5, 9, 2, 1, 4, 3]** **correctly returns a mean value equal to 4 [#]**. 
        - Mathematical explanation: the mean of a vector is the sum of **all elements, or numbers**, in the vector v, which is then divided by the total amount of elements in the vector.
            - **Equation: mean(vector v) [#] = (sum of element values in vector v [#])/(total amount of elements in vector v [#])**
# Function to calculate vector v element sum and mean
function compute_mean(v)
    # Initialize sum of vector values to be 0
    sum_v = 0

    # Initialize vector v length
    v_number = length(v)

    # Iterate through vector for calculating sum
    for number in v
        sum_v += number
    end

    # Calculate mean, sum divided by number of values in v
    mean_v = sum_v / v_number
    return mean_v
end

# Test vector to calculate mean of vector
test_mean = [5, 9, 2, 1, 4, 3] # Expect mean to equal 4

# Test calculate mean of vector 
test_return = compute_mean(test_mean)
    
# Return mean of test vector
@show test_return
**In this problem**:

-   Explain the purpose of `mystery_function`.
-   Add comments to the code, explaining why and how it works. Refer to
    [“Best Practices for Writing Code
    Comments”](https://stackoverflow.blog/2021/12/23/best-practices-for-writing-code-comments/),
    and remember that bad comments can be just as bad as no comments at
    all. You do not need to add comments to every line (in fact, this is
    very bad practice), but you should note the *purpose* of every
    “section” of code, and add comments explaining any code sequences
    that you don’t immediately understand.
-   Is there a built-in Julia function that does the same thing as
    `mystery_function`? If so, what is it? Use it to do the same thing
    as the code above.

### Problem 3 (10 points)

You’re interested in writing some code to remove the mean of a vector.

**In this problem**:

-   Write a function `compute_mean(v)` which sums all of the elements of
    a vector `v` using a `for` loop and computes the mean.
-   Make a random vector `random_vect` of length 10 using Julia’s
    `rand()` function. Use your `compute_mean()` function to calculate
    its mean and subtract it from `random_vect` **without a loop**
    (using a Julia technique called *broadcasting*; feel free to consult
    the Julia documentation and search as necessary). Check that the new
    vector has mean zero.

### Problem 4 (20 points)

Cheap Plastic Products, Inc. is operating a plant that produces
$100 \text{m}^3\text{/day}$ of wastewater that is discharged into
Pristine Brook. The wastewater contains $1 \text{kg/m}^3$ of YUK, a
toxic substance. The US Environmental Protection Agency has imposed an
effluent standard on the plant prohibiting discharge of more than
$20 \text{kg/day}$ of YUK into Pristine Brook.

Cheap Plastic Products has analyzed two methods for reducing its
discharges of YUK. Method 1 is land disposal, which costs $X_1^2/20$
dollars per day, where $X_1$ is the amount of wastewater disposed of on
the land ($\text{m}^3\text{/day}$). With this method, 20% of the YUK
applied to the land will eventually drain into the stream (*i.e.*, 80%
of the YUK is removed by the soil).

Method 2 is a chemical treatment procedure which costs \$1.50 per
$\text{m}^3$ of wastewater treated. The chemical treatment has an
efficiency of $e= 1 - 0.005X_2$, where $X_2$ is the quantity of
wastewater ($\text{m}^3\text{/day}$) treated. For example, if
$X_2 = 50 \text{m}^3\text{/day}$, then $e = 1 - 0.005(50) = 0.75$, so
that 75% of the YUK is removed.

Cheap Plastic Products is wondering how to allocate their wastewater
between these three disposal and treatment methods (land disposal, and
chemical treatment, and land disposal) to meet the effluent standard
while keeping costs manageable.

The flow of wastewater through this treatment system is shown in
<a href="#fig-wastewater" class="quarto-xref">Figure 1</a>. Modify the
edge labels (by editing the `edge_labels` dictionary in the code
producing <a href="#fig-wastewater" class="quarto-xref">Figure 1</a>) to
show how the wastewater allocations result in the final YUK discharge
into Pristine Brook. For the `edge_label` dictionary, the tuple $(i, j)$
corresponds to the arrow going from node $i$ to node $j$. The syntax for
any entry is `(i, j) => "label text"`, and the label text can include
mathematical notation if the string is prefaced with an `L`, as in
`L"x_1"` will produce $x_1$.
##### Problem 4 Debugging Errors, Syntax, Logic, Mathematical Explanations
- Correct implementation evidence: implemented the **function discharge_also_cost** with the **purpose** of calculating the total wastewater YUK discharge to Pristine Brook [m^(3)/day] and total cost of treatment [$].
- Solution: executed code which **produced a final graph**, which is a modified version of Figure 1 from the homework assignment. 
- **Equations and Derivations**:
    - Discharge of **X_1 (land disposal)**:
        - Problem statement: 20% of YUK applied to land drains into stream, so efficiency of YUK = 80%
        - So, YUK discharge_X_1 = 1 - 0.80 = 0.20
    - Discharge of **X_2 (chemical treatment)**:
        - Problem statement: efficiency of treatment is e = 1 - 0.005X_2
        - So, YUK discharge_X_2 = 1 - (0.005 * X_2)
    - Discharge of **X_3 (untreated)**:
        - Problem statement: Figure 1 shows that some discharge does not undergo treatment and just discharged
    - **Remaining discharge** that doesn't undergo treatment derivation:
        - Amount remaining from initial total discharge = 100 [m^(3)/day]
            - Minus discharge amount not accounted for by the discharge_X_1 and discharge_X_2 amounts (remaining discharge [m^(3)/day] = total discharge amount [m^(3)/day] minus discharge amounts already accounted for [m^(3)/day])
        - So, discharge_X_3 [m^(3)/day] = total discharge [m^(3)/day] - discharge X_1 - discharge X_2 [m^(3)/day]
        - Thus, discharge_X_3 [m^(3)/day] = 100 - X_2 - X_1 [m^(3)/day]
- **Mathematical model**:
    - **Variables**: X_1 (wastewater YUK land treatment) [m^(3)/day], X_2 (wastewater chemical treatment) [m^(3)/day], X_3 (wastewater direct discharge to Pristine Brook) [m^(3)/day]
    - **Constraints**: 
        - Total discharge = 100 [m^(3)/day], which is the sum of all 3 methods
        - 100 [m^(3)/day] = X_1 [m^(3)/day] + X_2 [m^(3)/day] + X_3 [m^(3)/day]
        - Total cost [$] = cost of X_1 [$] + X_2 [$]
            - Cost of X_1 [$] = ((X_1 [m^(3)/day]])^(2))/(20)
            - Cost of X_2 [$] = X_2 [m^(3)/day] * 1.50
            - So, total cost [$] = ((X_1 [m^(3)/day])^(2))/(20) + X_2 [m^(3)/day] * 1.50






- **Final graph** (succinct description, descriptive legend, choice of axes):
    - Succinct **description:**
        - **Visual graph output after modification of Figure 1: System diagram of the wastewater treatment options in Problem 4**:  
            - Plant -> Land Treatment arrow: now shows land treatment value, X_1 [m^(3)/day]
            - Land Treatment -> Pristine Brook arrow: now shows land disposal value, 0.2*X_1 [m^(3)/day]
            - Plant -> Chemical Treatment arrow: now shows chemical treatment value, X_2 [m^(3)/day]
            - Chemical Treatment -> Pristine Brook arrow: now shows chemical disposal value, (1-e)*X_2^(2) [m^(3)/day]
            - Plant -> Pristine Brook arrow: now shows direct disposal value, X_3 [m^(3)/day]
        - Dictionary: modified to edd edge labels to the graph.
        - Changes made to code: **used GraphRecipes, a package to produce graphs in visual format** and **added syntax/code** for points (1,2), (1,3), (1,4), (2,4), (3,4) to modify the dictionary and align with Problem 4 specifications.
    - Descriptive **legend**:
        - X_1 = wastewater land treatment [m^(3)/day]
        - 0.2 * X_1 = wastewater YUK land disposal [m^(3)/day]
        - X_2 = wastewater chemical treatment [m^(3)/day]
        - (1-e)*X_2^(2) = wastewater YUK chemical disposal [m^(3)/day]
        - X_3 = wastewater YUK direct disposal [m^(3)/day]
    - Choice of axes: the **axes were not modified from their original states before modification of Figure 1**.

# Function to calculate YUK discharge and cost
function discharge_also_cost(X_1,X_# Import packages for graphing results
using Plots
using GraphRecipes
using LaTeXStrings
2)
    
    # Calculate X_3 (remainder) from total, X_1, and X_2
    X_3 = 100 - X_2 - X_1 # [m^(3)/day]

    # Calculate X_1, X_2, X_3 discharges considering efficiency
    discharge_X_1 = 0.2 * X_1 # YUK land disposal
    efficiency_X_2 = 1 - (0.005*X_2) # Chemical treatment efficiency
    discharge_X_2 = (1 - efficiency_X_2) * X_2 # YUK chemical treatment
    discharge_X_3 = X_3 # Untreated wastewater YUK

    # Calculate total YUK discharge [m^(3)/day]
    discharge_total = discharge_X_1 + discharge_X_2 + discharge_X_3

    # Calculate cost of each treatment X_1 (land) and X_2 (chemical) [$]
    cost_1 = ((X_1)^(2))/(20)
    cost_2 = X_2 * 1.50

    # Total cost of treatment for X_1 and X_2 [$]
    cost_1_and_2 = cost_1 + cost_2

    # Return total discharge and cost
    return(discharge_total, cost_1_and_2)
end

# Initialize test values for land disposal and chemical treatment
X_1 = 15 # Land disposal amount [m^(3)/day]
X_2 = 20 # Chemical treatment amount [m^(3)/day]

# Implement discharge_also_cost function to calculate discharge and cost 
discharge, cost = discharge_also_cost(X_1, X_2)

# Print YUK discharge and cost results
println("The Total Discharge is: $discharge m^(3)/day")
println("The Total Cost is: $cost dollars/day")

# Vectors of inputs for broadcasting the function
X_1_broadcast_values = [5, 18, 22, 23, 32] # Land disposal range 0 to 100 m^(3)/day
X_2_broadcast_values = [9, 21, 29, 20, 20] # Chemical treatment range 0 to 100 m^(3)/day

# Broadcast function discharge_also_cost to evaluate over vectors of inputs
output = discharge_also_cost.(X_1_broadcast_values, X_2_broadcast_values)

# Comprehension for loop to calculate discharge and cost results
Discharge_result = [out[1] for out in output]
Cost_result = [out[2] for out in output]

# Show results from calculating Discharge and Cost
    @show Discharge_result;
    @show Cost_result;
##### Problem 4 Graph of Solution for Various Treatment to Disposal in Pristine Brook Options
- **Final graph** (succinct description, descriptive legend, choice of axes):
    - Succinct **description:**
        - **Visual graph output after modification of Figure 1: System diagram of the wastewater treatment options in Problem 4**:  
            - Plant -> Land Treatment arrow: now shows land treatment value, X_1 [m^(3)/day]
            - Land Treatment -> Pristine Brook arrow: now shows land disposal value, 0.2*X_1 [m^(3)/day]
            - Plant -> Chemical Treatment arrow: now shows chemical treatment value, X_2 [m^(3)/day]
            - Chemical Treatment -> Pristine Brook arrow: now shows chemical disposal value, (1-e)*X_2^(2) [m^(3)/day]
            - Plant -> Pristine Brook arrow: now shows direct disposal value, X_3 [m^(3)/day]
        - Dictionary: modified to edd edge labels to the graph.
        - Changes made to code: **used GraphRecipes, a package to produce graphs in visual format** and **added syntax/code** for points (1,2), (1,3), (1,4), (2,4), (3,4) to modify the dictionary and align with Problem 4 specifications.
    - Descriptive **legend**:
        - X_1 = wastewater land treatment [m^(3)/day]
        - 0.2 * X_1 = wastewater YUK land disposal [m^(3)/day]
        - X_2 = wastewater chemical treatment [m^(3)/day]
        - (1-e)*X_2^(2) = wastewater YUK chemical disposal [m^(3)/day]
        - X_3 = wastewater YUK direct disposal [m^(3)/day]
    - Choice of axes: the **axes were not modified from their original states before modification of Figure 1**.
# Import packages for graphing results
using Plots
using GraphRecipes

using Pkg
Pkg.add("LaTeXStrings")

using LaTeXStrings

# Initialize matrix A to create graph
A = [0 1 1 1;
    0 0 0 1;
    0 0 0 1;
    0 0 0 0]

# Names of pathways for visualization on graph
names = ["Plant", "Land Treatment", "Chemical Treatment", "Pristine Brook"]

# Modified dictionary for adding edge labels
edge_labels = Dict(
    (1, 2) => L"X_1", # X_1, land treatment
    (1,3) => L"X_2", # X_2, chemical treatment
    (1, 4) => L"X_3", # X_3, Remaining discharge straight to Pristine Brook
    (2, 4) => L"0.2 \times X_1", # Discharge after X_1 land treatment
    (3, 4) => L"(1-e) \times X_2^(2)" # Discharge after X_2 chemical treatment
)

# Shapes and points for graphs
shapes=[:hexagon, :rect, :rect, :hexagon]
xpos = [0, -1.5, -0.25, 1]
ypos = [1, 0, 0, -1]

# Plot graph to visualize wastewater flow utilizing treatment methods
p = graphplot(A, 
            names=names, 
            edgelabel=edge_labels, 
            markersize=0.15, 
            markershapes=shapes, 
            markercolor=:white, 
            x=xpos, 
            y=ypos)

# Display plot graph
display(p)
**In this problem**:

-   Formulate a mathematical model for the treatment cost and the amount
    of YUK that will be discharged into Pristine Brook based on the
    wastewater allocations. This is best done with some equations and
    supporting text explaining the derivation. Make sure you include, as
    additional equations in the model, any needed constraints on
    relevant values. You can find some basics on writing mathematical
    equations using the LaTeX typesetting syntax
    [here](https://viveks.me/environmental-systems-analysis/tutorials/latex-notebook.qmd),
    and a cheatsheet with LaTeX commands can be found on the course
    website’s [Resources
    page](https://viveks.me/environmental-systems-analysis/resources/markdown.qmd).

-   Implement your systems model as a Julia function which computes the
    resulting YUK concentration and cost for a particular treatment
    plan. You can return multiple values from a function with a
    [tuple](https://docs.julialang.org/en/v1/manual/functions/#Tuples-1),
    as in:

    ``` {julia}
    function multiple_return_values(x, y)
        return (x+y, x*y)
    end

    a, b = multiple_return_values(2, 5)
    @show a;
    @show b;
    ```

    To evalute the function over vectors of inputs, you can *broadcast*
    the function by adding a decimal `.` before the function arguments
    and accessing the resulting values by writing a *comprehension* to
    loop over the individual outputs in the vector:

    ``` {julia}
    x = [1, 2, 3, 4, 5]
    y = [6, 7, 8, 9, 10]

    output = multiple_return_values.(x, y)
    a = [out[1] for out in output]
    b = [out[2] for out in output]
    @show a;
    @show b;
    ```

    Make sure you comment your code appropriately to make it clear what
    is going on and why.

-   Use your function to experiment with some different combinations of
    wastewater discharge and treatment and plot the results of these
    experiments. Can you find one that satisfies the YUK effluent
    standard (plot this as well as a dashed red line)? What was the
    cost? What can you say about the tradeoff between treatment cost and
    YUK concentration? You don’t have to find an “optimal” solution to
    this problem, but what do you think would be needed to find a better
    solution?

### Problem 5 (10 points)

**This problem is only required for students in BEE 5750**.
#### Problem 5.1

Using a
[comprehension](https://viveks.me/environmental-systems-analysis/tutorials/julia-basics.html#comprehensions),
count the number of odd numbers between 0 and 149.
> **Hint**
>
> `iseven()` returns `true` for even numbers and `false` for odd
> numbers.
#### Problem 5.2

Write a function `polynomial(x, a)` which calculates the polynomial
$$p(x) = \sum_{i=1}^n a_i x^i$$

based on a point `x` and a coefficient vector `a` of length `n` using a
loop. Test your function by computing $$p(x) = 2x^3 - x^2 + 1$$ at
$x=2$.
## References

List any external references consulted, including classmates.
##### External References Consulted
1) https://docs.julialang.org/en/v1/base/collections/
- This reference from Julia showed solution to Problem 2. 
- The unique function was identified as built-in function
to replace mystery_function
2) https://docs.julialang.org/en/v1/stdlib/Markdown/
- Consulted for syntax to create Markdown cell 'Problem 3'
- Directions for headers consulted, used 3 #'s to create smaller heading size that matches others
- Wanted to make a new header for Problem 3 because Problem 2 and 3 directions were combined in 1 Markdown cell
3) https://docs.juliahub.com/GraphRecipes/7oEYB/0.5.1/
- Syntax and instructions for using GraphRecipes and edge_labels
- Problem 4, for making graph and modifying labels
- GraphRecipes: package in Plots, creates graphplot and edge_labels visualizations# Files generated by invoking Julia with --code-coverage
*.jl.cov
*.jl.*.cov

# Files generated by invoking Julia with --track-allocation
*.jl.mem

# Weave.jl output
jl*/

# System-specific files and directories generated by the BinaryProvider and BinDeps packages
# They contain absolute paths specific to the host computer, and so should not be committed
deps/deps.jl
deps/build.log
deps/downloads/
deps/usr/
deps/src/

# Build artifacts for creating documentation generated by the Documenter package
docs/build/
docs/site/

# File generated by Pkg, the package manager, based on a corresponding Project.toml
# It records a fixed state of all packages used by the project. As such, it should not be
# committed for packages, but should be committed for applications that require a static
# environment.
Manifest.toml

# Weave/Pandoc intermediates
*.tex
*.toc
*.aux
*.out
*.log
*.fls
*.fdb*

# HTML output
*.html

.DS_Store

*_files/